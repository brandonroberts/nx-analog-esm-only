import { __awaiter } from "tslib";
import * as fs from 'fs';
import { create } from 'xmlbuilder2';
import * as path from 'path';
export function buildSitemap(config, sitemapConfig, routes, outputDir) {
    return __awaiter(this, void 0, void 0, function* () {
        const routeList = yield optionHasRoutes(routes);
        if (routeList.length) {
            const slash = checkSlash(sitemapConfig.host);
            const sitemapData = routeList.map((page) => ({
                page: `${sitemapConfig.host}${slash}${page.replace(/^\/+/g, '')}`,
                lastMod: new Date().toISOString().split('T')[0],
            }));
            const sitemap = createXml('urlset');
            for (const item of sitemapData) {
                const page = sitemap.ele('url');
                page.ele('loc').txt(item.page);
                page.ele('lastmod').txt(item.lastMod);
            }
            const mapPath = `${path.resolve(outputDir)}/sitemap.xml`;
            try {
                console.log(`Writing sitemap at ${mapPath}`);
                fs.writeFileSync(mapPath, sitemap.end({ prettyPrint: true }));
            }
            catch (e) {
                console.error(`Unable to write file at ${mapPath}`, e);
            }
        }
    });
}
function createXml(elementName) {
    return create({ version: '1.0', encoding: 'UTF-8' })
        .ele(elementName, {
        xmlns: 'https://www.sitemaps.org/schemas/sitemap/0.9',
    })
        .com(`This file was automatically generated by Analog.`);
}
function checkSlash(host) {
    const finalChar = host.slice(-1);
    return finalChar === '/' ? '' : '/';
}
function optionHasRoutes(routes) {
    return __awaiter(this, void 0, void 0, function* () {
        let routeList;
        if (typeof routes === 'function') {
            // returns an array or undefined
            routeList = yield routes();
        }
        else if (Array.isArray(routes)) {
            // returns an array of strings
            routeList = routes;
        }
        else {
            // default it to an empty of array
            routeList = [];
        }
        return routeList;
    });
}
//# sourceMappingURL=build-sitemap.js.map