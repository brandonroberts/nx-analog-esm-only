import { inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { firstValueFrom } from 'rxjs';
import { ROUTE_META_TAGS_KEY } from './meta-tags';
import { PAGE_ENDPOINTS, ANALOG_META_KEY } from './endpoints';
export function toRouteConfig(routeMeta) {
    if (routeMeta && isRedirectRouteMeta(routeMeta)) {
        return routeMeta;
    }
    let { meta, ...routeConfig } = routeMeta ?? {};
    if (Array.isArray(meta)) {
        routeConfig.data = { ...routeConfig.data, [ROUTE_META_TAGS_KEY]: meta };
    }
    else if (typeof meta === 'function') {
        routeConfig.resolve = {
            ...routeConfig.resolve,
            [ROUTE_META_TAGS_KEY]: meta,
        };
    }
    if (!routeConfig) {
        routeConfig = {};
    }
    routeConfig.resolve = {
        ...routeConfig.resolve,
        load: async (route) => {
            const routeConfig = route.routeConfig;
            if (PAGE_ENDPOINTS[routeConfig[ANALOG_META_KEY].endpointKey]) {
                const { queryParams, fragment: hash, params, parent } = route;
                const segment = parent?.url.map((segment) => segment.path).join('/') || '';
                const url = new URL('', import.meta.env['VITE_ANALOG_PUBLIC_BASE_URL']);
                url.pathname = `/api/_analog${routeConfig[ANALOG_META_KEY].endpoint}`;
                url.search = `${new URLSearchParams(queryParams).toString()}`;
                url.hash = hash ?? '';
                Object.keys(params).forEach((param) => {
                    url.pathname = url.pathname.replace(`[${param}]`, params[param]);
                });
                url.pathname = url.pathname.replace('**', segment);
                if (globalThis.$fetch) {
                    return globalThis.$fetch(url.pathname);
                }
                const http = inject(HttpClient);
                return firstValueFrom(http.get(`${url.href}`));
            }
            return {};
        },
    };
    return routeConfig;
}
function isRedirectRouteMeta(routeMeta) {
    return !!routeMeta.redirectTo;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGUtY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvcm91dGVyL3NyYy9saWIvcm91dGUtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHdEMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRTlELE1BQU0sVUFBVSxhQUFhLENBQUMsU0FBZ0M7SUFDNUQsSUFBSSxTQUFTLElBQUksbUJBQW1CLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDL0MsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFFRCxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsV0FBVyxFQUFFLEdBQUcsU0FBUyxJQUFJLEVBQUUsQ0FBQztJQUUvQyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDdkIsV0FBVyxDQUFDLElBQUksR0FBRyxFQUFFLEdBQUcsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLG1CQUFtQixDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7S0FDekU7U0FBTSxJQUFJLE9BQU8sSUFBSSxLQUFLLFVBQVUsRUFBRTtRQUNyQyxXQUFXLENBQUMsT0FBTyxHQUFHO1lBQ3BCLEdBQUcsV0FBVyxDQUFDLE9BQU87WUFDdEIsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLElBQUk7U0FDNUIsQ0FBQztLQUNIO0lBRUQsSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUNoQixXQUFXLEdBQUcsRUFBRSxDQUFDO0tBQ2xCO0lBRUQsV0FBVyxDQUFDLE9BQU8sR0FBRztRQUNwQixHQUFHLFdBQVcsQ0FBQyxPQUFPO1FBQ3RCLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDcEIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBRXpCLENBQUM7WUFFRixJQUFJLGNBQWMsQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQzVELE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDO2dCQUM5RCxNQUFNLE9BQU8sR0FDWCxNQUFNLEVBQUUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQzdELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hFLEdBQUcsQ0FBQyxRQUFRLEdBQUcsZUFBZSxXQUFXLENBQUMsZUFBZSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3RFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsR0FBRyxJQUFJLGVBQWUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO2dCQUM5RCxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7Z0JBRXRCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQ3BDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLEdBQUcsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDbkUsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsR0FBRyxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBRW5ELElBQUssVUFBa0IsQ0FBQyxNQUFNLEVBQUU7b0JBQzlCLE9BQVEsVUFBa0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUNqRDtnQkFFRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQ2hDLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ2hEO1lBRUQsT0FBTyxFQUFFLENBQUM7UUFDWixDQUFDO0tBQ0YsQ0FBQztJQUVGLE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxTQUFTLG1CQUFtQixDQUMxQixTQUFvQjtJQUVwQixPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0FBQ2hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgdHlwZSB7IFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGZpcnN0VmFsdWVGcm9tIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFJlZGlyZWN0Um91dGVNZXRhLCBSb3V0ZUNvbmZpZywgUm91dGVNZXRhIH0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IHsgUk9VVEVfTUVUQV9UQUdTX0tFWSB9IGZyb20gJy4vbWV0YS10YWdzJztcbmltcG9ydCB7IFBBR0VfRU5EUE9JTlRTLCBBTkFMT0dfTUVUQV9LRVkgfSBmcm9tICcuL2VuZHBvaW50cyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1JvdXRlQ29uZmlnKHJvdXRlTWV0YTogUm91dGVNZXRhIHwgdW5kZWZpbmVkKTogUm91dGVDb25maWcge1xuICBpZiAocm91dGVNZXRhICYmIGlzUmVkaXJlY3RSb3V0ZU1ldGEocm91dGVNZXRhKSkge1xuICAgIHJldHVybiByb3V0ZU1ldGE7XG4gIH1cblxuICBsZXQgeyBtZXRhLCAuLi5yb3V0ZUNvbmZpZyB9ID0gcm91dGVNZXRhID8/IHt9O1xuXG4gIGlmIChBcnJheS5pc0FycmF5KG1ldGEpKSB7XG4gICAgcm91dGVDb25maWcuZGF0YSA9IHsgLi4ucm91dGVDb25maWcuZGF0YSwgW1JPVVRFX01FVEFfVEFHU19LRVldOiBtZXRhIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1ldGEgPT09ICdmdW5jdGlvbicpIHtcbiAgICByb3V0ZUNvbmZpZy5yZXNvbHZlID0ge1xuICAgICAgLi4ucm91dGVDb25maWcucmVzb2x2ZSxcbiAgICAgIFtST1VURV9NRVRBX1RBR1NfS0VZXTogbWV0YSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKCFyb3V0ZUNvbmZpZykge1xuICAgIHJvdXRlQ29uZmlnID0ge307XG4gIH1cblxuICByb3V0ZUNvbmZpZy5yZXNvbHZlID0ge1xuICAgIC4uLnJvdXRlQ29uZmlnLnJlc29sdmUsXG4gICAgbG9hZDogYXN5bmMgKHJvdXRlKSA9PiB7XG4gICAgICBjb25zdCByb3V0ZUNvbmZpZyA9IHJvdXRlLnJvdXRlQ29uZmlnIGFzIFJvdXRlICYge1xuICAgICAgICBbQU5BTE9HX01FVEFfS0VZXTogeyBlbmRwb2ludDogc3RyaW5nOyBlbmRwb2ludEtleTogc3RyaW5nIH07XG4gICAgICB9O1xuXG4gICAgICBpZiAoUEFHRV9FTkRQT0lOVFNbcm91dGVDb25maWdbQU5BTE9HX01FVEFfS0VZXS5lbmRwb2ludEtleV0pIHtcbiAgICAgICAgY29uc3QgeyBxdWVyeVBhcmFtcywgZnJhZ21lbnQ6IGhhc2gsIHBhcmFtcywgcGFyZW50IH0gPSByb3V0ZTtcbiAgICAgICAgY29uc3Qgc2VnbWVudCA9XG4gICAgICAgICAgcGFyZW50Py51cmwubWFwKChzZWdtZW50KSA9PiBzZWdtZW50LnBhdGgpLmpvaW4oJy8nKSB8fCAnJztcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCgnJywgaW1wb3J0Lm1ldGEuZW52WydWSVRFX0FOQUxPR19QVUJMSUNfQkFTRV9VUkwnXSk7XG4gICAgICAgIHVybC5wYXRobmFtZSA9IGAvYXBpL19hbmFsb2cke3JvdXRlQ29uZmlnW0FOQUxPR19NRVRBX0tFWV0uZW5kcG9pbnR9YDtcbiAgICAgICAgdXJsLnNlYXJjaCA9IGAke25ldyBVUkxTZWFyY2hQYXJhbXMocXVlcnlQYXJhbXMpLnRvU3RyaW5nKCl9YDtcbiAgICAgICAgdXJsLmhhc2ggPSBoYXNoID8/ICcnO1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaCgocGFyYW0pID0+IHtcbiAgICAgICAgICB1cmwucGF0aG5hbWUgPSB1cmwucGF0aG5hbWUucmVwbGFjZShgWyR7cGFyYW19XWAsIHBhcmFtc1twYXJhbV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgdXJsLnBhdGhuYW1lID0gdXJsLnBhdGhuYW1lLnJlcGxhY2UoJyoqJywgc2VnbWVudCk7XG5cbiAgICAgICAgaWYgKChnbG9iYWxUaGlzIGFzIGFueSkuJGZldGNoKSB7XG4gICAgICAgICAgcmV0dXJuIChnbG9iYWxUaGlzIGFzIGFueSkuJGZldGNoKHVybC5wYXRobmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBodHRwID0gaW5qZWN0KEh0dHBDbGllbnQpO1xuICAgICAgICByZXR1cm4gZmlyc3RWYWx1ZUZyb20oaHR0cC5nZXQoYCR7dXJsLmhyZWZ9YCkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge307XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gcm91dGVDb25maWc7XG59XG5cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSb3V0ZU1ldGEoXG4gIHJvdXRlTWV0YTogUm91dGVNZXRhXG4pOiByb3V0ZU1ldGEgaXMgUmVkaXJlY3RSb3V0ZU1ldGEge1xuICByZXR1cm4gISFyb3V0ZU1ldGEucmVkaXJlY3RUbztcbn1cbiJdfQ==