{"version":3,"file":"analogjs-router.mjs","sources":["../../../../packages/router/src/lib/meta-tags.ts","../../../../packages/router/src/lib/endpoints.ts","../../../../packages/router/src/lib/route-config.ts","../../../../packages/router/src/lib/markdown-helpers.ts","../../../../packages/router/src/lib/constants.ts","../../../../packages/router/src/lib/routes.ts","../../../../packages/router/src/lib/define-route.ts","../../../../packages/router/src/lib/provide-file-router.ts","../../../../packages/router/src/lib/inject-load.ts","../../../../packages/router/src/analogjs-router.ts"],"sourcesContent":["import { inject } from '@angular/core';\nimport { Meta, MetaDefinition as NgMetaTag } from '@angular/platform-browser';\nimport { ActivatedRouteSnapshot, NavigationEnd, Router } from '@angular/router';\nimport { filter } from 'rxjs/operators';\n\nexport const ROUTE_META_TAGS_KEY = Symbol(\n  '@analogjs/router Route Meta Tags Key'\n);\n\nconst CHARSET_KEY = 'charset';\nconst HTTP_EQUIV_KEY = 'httpEquiv';\n// httpEquiv selector key needs to be in kebab case format\nconst HTTP_EQUIV_SELECTOR_KEY = 'http-equiv';\nconst NAME_KEY = 'name';\nconst PROPERTY_KEY = 'property';\nconst CONTENT_KEY = 'content';\n\nexport type MetaTag =\n  | (CharsetMetaTag & ExcludeRestMetaTagKeys<typeof CHARSET_KEY>)\n  | (HttpEquivMetaTag & ExcludeRestMetaTagKeys<typeof HTTP_EQUIV_KEY>)\n  | (NameMetaTag & ExcludeRestMetaTagKeys<typeof NAME_KEY>)\n  | (PropertyMetaTag & ExcludeRestMetaTagKeys<typeof PROPERTY_KEY>);\n\ntype CharsetMetaTag = { [CHARSET_KEY]: string };\ntype HttpEquivMetaTag = { [HTTP_EQUIV_KEY]: string; [CONTENT_KEY]: string };\ntype NameMetaTag = { [NAME_KEY]: string; [CONTENT_KEY]: string };\ntype PropertyMetaTag = { [PROPERTY_KEY]: string; [CONTENT_KEY]: string };\n\ntype MetaTagKey =\n  | typeof CHARSET_KEY\n  | typeof HTTP_EQUIV_KEY\n  | typeof NAME_KEY\n  | typeof PROPERTY_KEY;\ntype ExcludeRestMetaTagKeys<Key extends MetaTagKey> = {\n  [K in Exclude<MetaTagKey, Key>]?: never;\n};\n\ntype MetaTagSelector =\n  | typeof CHARSET_KEY\n  | `${\n      | typeof HTTP_EQUIV_SELECTOR_KEY\n      | typeof NAME_KEY\n      | typeof PROPERTY_KEY}=\"${string}\"`;\ntype MetaTagMap = Record<MetaTagSelector, MetaTag>;\n\nexport function updateMetaTagsOnRouteChange(): void {\n  const router = inject(Router);\n  const metaService = inject(Meta);\n\n  router.events\n    .pipe(filter((event) => event instanceof NavigationEnd))\n    .subscribe(() => {\n      const metaTagMap = getMetaTagMap(router.routerState.snapshot.root);\n\n      for (const metaTagSelector in metaTagMap) {\n        const metaTag = metaTagMap[\n          metaTagSelector as MetaTagSelector\n        ] as NgMetaTag;\n        metaService.updateTag(metaTag, metaTagSelector);\n      }\n    });\n}\n\nfunction getMetaTagMap(route: ActivatedRouteSnapshot): MetaTagMap {\n  const metaTagMap = {} as MetaTagMap;\n  let currentRoute: ActivatedRouteSnapshot | null = route;\n\n  while (currentRoute) {\n    const metaTags: MetaTag[] = currentRoute.data[ROUTE_META_TAGS_KEY] ?? [];\n    for (const metaTag of metaTags) {\n      metaTagMap[getMetaTagSelector(metaTag)] = metaTag;\n    }\n\n    currentRoute = currentRoute.firstChild;\n  }\n\n  return metaTagMap;\n}\n\nfunction getMetaTagSelector(metaTag: MetaTag): MetaTagSelector {\n  if (metaTag.name) {\n    return `${NAME_KEY}=\"${metaTag.name}\"`;\n  }\n\n  if (metaTag.property) {\n    return `${PROPERTY_KEY}=\"${metaTag.property}\"`;\n  }\n\n  if (metaTag.httpEquiv) {\n    return `${HTTP_EQUIV_SELECTOR_KEY}=\"${metaTag.httpEquiv}\"`;\n  }\n\n  return CHARSET_KEY;\n}\n","export const ANALOG_META_KEY = Symbol(\n  '@analogjs/router Analog Route Metadata Key'\n);\n\nexport const PAGE_ENDPOINTS = import.meta.glob([\n  '/src/app/pages/**/*.server.ts',\n]);\n","import { inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport type { Route } from '@angular/router';\nimport { firstValueFrom } from 'rxjs';\n\nimport { RedirectRouteMeta, RouteConfig, RouteMeta } from './models';\nimport { ROUTE_META_TAGS_KEY } from './meta-tags';\nimport { PAGE_ENDPOINTS, ANALOG_META_KEY } from './endpoints';\n\nexport function toRouteConfig(routeMeta: RouteMeta | undefined): RouteConfig {\n  if (routeMeta && isRedirectRouteMeta(routeMeta)) {\n    return routeMeta;\n  }\n\n  let { meta, ...routeConfig } = routeMeta ?? {};\n\n  if (Array.isArray(meta)) {\n    routeConfig.data = { ...routeConfig.data, [ROUTE_META_TAGS_KEY]: meta };\n  } else if (typeof meta === 'function') {\n    routeConfig.resolve = {\n      ...routeConfig.resolve,\n      [ROUTE_META_TAGS_KEY]: meta,\n    };\n  }\n\n  if (!routeConfig) {\n    routeConfig = {};\n  }\n\n  routeConfig.resolve = {\n    ...routeConfig.resolve,\n    load: async (route) => {\n      const routeConfig = route.routeConfig as Route & {\n        [ANALOG_META_KEY]: { endpoint: string; endpointKey: string };\n      };\n\n      if (PAGE_ENDPOINTS[routeConfig[ANALOG_META_KEY].endpointKey]) {\n        const { queryParams, fragment: hash, params, parent } = route;\n        const segment =\n          parent?.url.map((segment) => segment.path).join('/') || '';\n        const url = new URL('', import.meta.env['VITE_ANALOG_PUBLIC_BASE_URL']);\n        url.pathname = `/api/_analog${routeConfig[ANALOG_META_KEY].endpoint}`;\n        url.search = `${new URLSearchParams(queryParams).toString()}`;\n        url.hash = hash ?? '';\n\n        Object.keys(params).forEach((param) => {\n          url.pathname = url.pathname.replace(`[${param}]`, params[param]);\n        });\n        url.pathname = url.pathname.replace('**', segment);\n\n        if ((globalThis as any).$fetch) {\n          return (globalThis as any).$fetch(url.pathname);\n        }\n\n        const http = inject(HttpClient);\n        return firstValueFrom(http.get(`${url.href}`));\n      }\n\n      return {};\n    },\n  };\n\n  return routeConfig;\n}\n\nfunction isRedirectRouteMeta(\n  routeMeta: RouteMeta\n): routeMeta is RedirectRouteMeta {\n  return !!routeMeta.redirectTo;\n}\n","import { inject } from '@angular/core';\nimport { RouteExport } from './models';\n\ndeclare const Zone: any;\n\n// The Zone is currently enabled by default, so we wouldn't need this check.\n// However, leaving this open space will be useful if zone.js becomes optional\n// in the future. This means we won't have to modify the current code, and it will\n// continue to work seamlessly.\nconst isNgZoneEnabled = typeof Zone !== 'undefined' && !!Zone.root;\n\nexport function toMarkdownModule(\n  markdownFileFactory: () => Promise<string>\n): () => Promise<RouteExport> {\n  return async () => {\n    const createLoader = () =>\n      Promise.all([import('@analogjs/content'), markdownFileFactory()]);\n\n    const [\n      { parseRawContentFile, MarkdownRouteComponent, ContentRenderer },\n      markdownFile,\n    ]: [typeof import('@analogjs/content'), string] = await (isNgZoneEnabled\n      ? // We are not able to use `runOutsideAngular` because we are not inside\n        // an injection context to retrieve the `NgZone` instance.\n        // The `Zone.root.run` is required when the code is running in the\n        // browser since asynchronous tasks being scheduled in the current context\n        // are a reason for unnecessary change detection cycles.\n        Zone.root.run(createLoader)\n      : createLoader());\n\n    const { content, attributes } = parseRawContentFile(markdownFile);\n    const { title, meta } = attributes;\n\n    return {\n      default: MarkdownRouteComponent,\n      routeMeta: {\n        data: { _analogContent: content },\n        title,\n        meta,\n        resolve: {\n          renderedAnalogContent: async () => {\n            const contentRenderer = inject(ContentRenderer);\n            return contentRenderer.render(content);\n          },\n        },\n      },\n    };\n  };\n}\n","export const ENDPOINT_EXTENSION = '.server.ts';\nexport const APP_DIR = 'src/app';\n","/// <reference types=\"vite/client\" />\n\nimport type { Route } from '@angular/router';\n\nimport type { RouteExport, RouteMeta } from './models';\nimport { toRouteConfig } from './route-config';\nimport { toMarkdownModule } from './markdown-helpers';\nimport { APP_DIR, ENDPOINT_EXTENSION } from './constants';\nimport { ANALOG_META_KEY } from './endpoints';\n\nconst FILES = import.meta.glob<RouteExport>([\n  '/app/routes/**/*.ts',\n  '/src/app/routes/**/*.ts',\n  '/src/app/pages/**/*.page.ts',\n]);\n\nconst CONTENT_FILES = import.meta.glob<string>(\n  ['/src/app/routes/**/*.md', '/src/app/pages/**/*.md'],\n  { as: 'raw' }\n);\n\nexport type Files = Record<string, () => Promise<RouteExport | string>>;\n\ntype RawRoute = {\n  filename: string | null;\n  rawSegment: string;\n  ancestorRawSegments: string[];\n  segment: string;\n  level: number;\n  children: RawRoute[];\n};\n\ntype RawRouteMap = Record<string, RawRoute>;\n\ntype RawRouteByLevelMap = Record<number, RawRouteMap>;\n\n/**\n * A function used to parse list of files and create configuration of routes.\n *\n * @param files\n * @returns Array of routes\n */\nexport function createRoutes(files: Files): Route[] {\n  const filenames = Object.keys(files);\n\n  if (filenames.length === 0) {\n    return [];\n  }\n\n  // map filenames to raw routes and group them by level\n  const rawRoutesByLevelMap = filenames.reduce((acc, filename) => {\n    const rawPath = toRawPath(filename);\n    const rawSegments = rawPath.split('/');\n    // nesting level starts at 0\n    // rawPath: /products => level: 0\n    // rawPath: /products/:id => level: 1\n    const level = rawSegments.length - 1;\n    const rawSegment = rawSegments[level];\n    const ancestorRawSegments = rawSegments.slice(0, level);\n\n    return {\n      ...acc,\n      [level]: {\n        ...acc[level],\n        [rawPath]: {\n          filename,\n          rawSegment,\n          ancestorRawSegments,\n          segment: toSegment(rawSegment),\n          level,\n          children: [],\n        },\n      },\n    };\n  }, {} as RawRouteByLevelMap);\n\n  const allLevels = Object.keys(rawRoutesByLevelMap).map(Number);\n  const maxLevel = Math.max(...allLevels);\n\n  // add each raw route to its parent's children array\n  for (let level = maxLevel; level > 0; level--) {\n    const rawRoutesMap = rawRoutesByLevelMap[level];\n    const rawPaths = Object.keys(rawRoutesMap);\n\n    for (const rawPath of rawPaths) {\n      const rawRoute = rawRoutesMap[rawPath];\n      const parentRawPath = rawRoute.ancestorRawSegments.join('/');\n      const parentRawSegmentIndex = rawRoute.ancestorRawSegments.length - 1;\n      const parentRawSegment =\n        rawRoute.ancestorRawSegments[parentRawSegmentIndex];\n\n      // create the parent level and/or raw route if it does not exist\n      // parent route won't exist for nested routes that don't have a layout route\n      rawRoutesByLevelMap[level - 1] ||= {};\n      rawRoutesByLevelMap[level - 1][parentRawPath] ||= {\n        filename: null,\n        rawSegment: parentRawSegment,\n        ancestorRawSegments: rawRoute.ancestorRawSegments.slice(\n          0,\n          parentRawSegmentIndex\n        ),\n        segment: toSegment(parentRawSegment),\n        level: level - 1,\n        children: [],\n      };\n\n      rawRoutesByLevelMap[level - 1][parentRawPath].children.push(rawRoute);\n    }\n  }\n\n  // only take raw routes from the root level\n  // since they already contain nested routes as their children\n  const rootRawRoutesMap = rawRoutesByLevelMap[0];\n  const rawRoutes = Object.keys(rootRawRoutesMap).map(\n    (segment) => rootRawRoutesMap[segment]\n  );\n  sortRawRoutes(rawRoutes);\n\n  return toRoutes(rawRoutes, files);\n}\n\nfunction toRawPath(filename: string): string {\n  return filename\n    .replace(\n      // convert to relative path and remove file extension\n      /^\\/(.*?)\\/routes\\/|^\\/(.*?)\\/pages\\/|\\/app\\/routes\\/|(\\.page\\.(js|ts)$)|(\\.(ts|md)$)/g,\n      ''\n    )\n    .replace(/\\[\\.{3}.+\\]/, '**') // [...not-found] => **\n    .replace(/\\[([^\\]]+)\\]/g, ':$1'); // [id] => :id\n}\n\nfunction toSegment(rawSegment: string): string {\n  return rawSegment\n    .replace(/index|\\(.*?\\)/g, '') // replace named empty segments\n    .replace(/\\.|\\/+/g, '/') // replace dots with slashes and remove redundant slashes\n    .replace(/^\\/+|\\/+$/g, ''); // remove trailing slashes\n}\n\nfunction toRoutes(rawRoutes: RawRoute[], files: Files): Route[] {\n  const routes: Route[] = [];\n\n  for (const rawRoute of rawRoutes) {\n    const children: Route[] | undefined =\n      rawRoute.children.length > 0\n        ? toRoutes(rawRoute.children, files)\n        : undefined;\n    let module: (() => Promise<RouteExport>) | undefined = undefined;\n    let analogMeta: { endpoint: string; endpointKey: string } | undefined =\n      undefined;\n\n    if (rawRoute.filename) {\n      const isMarkdownFile = rawRoute.filename.endsWith('.md');\n      module = isMarkdownFile\n        ? toMarkdownModule(files[rawRoute.filename] as () => Promise<string>)\n        : (files[rawRoute.filename] as () => Promise<RouteExport>);\n\n      const endpointKey = rawRoute.filename.replace(\n        /\\.page\\.ts$/,\n        ENDPOINT_EXTENSION\n      );\n\n      // get endpoint path\n      const rawEndpoint = rawRoute.filename\n        .replace(/\\.page\\.ts$/, '')\n        .replace(/\\[\\.{3}.+\\]/, '**') // [...not-found] => **\n        .split(APP_DIR)[1];\n\n      // replace periods, remove (index) paths\n      const endpoint = (rawEndpoint || '')\n        .replace(/\\./g, '/')\n        .replace(/\\/\\((.*?)\\)$/, '/-$1-');\n\n      analogMeta = {\n        endpoint,\n        endpointKey,\n      };\n    }\n\n    const route: Route & { meta?: typeof analogMeta } = module\n      ? {\n          path: rawRoute.segment,\n          loadChildren: () =>\n            module!().then((m) => [\n              {\n                path: '',\n                component: m.default,\n                ...toRouteConfig(m.routeMeta as RouteMeta | undefined),\n                children,\n                [ANALOG_META_KEY]: analogMeta,\n              },\n            ]),\n        }\n      : { path: rawRoute.segment, children };\n\n    routes.push(route);\n  }\n\n  return routes;\n}\n\nfunction sortRawRoutes(rawRoutes: RawRoute[]): void {\n  rawRoutes.sort((a, b) => {\n    let segmentA = deprioritizeSegment(a.segment);\n    let segmentB = deprioritizeSegment(b.segment);\n\n    // prioritize routes with fewer children\n    if (a.children.length > b.children.length) {\n      segmentA = `~${segmentA}`;\n    } else if (a.children.length < b.children.length) {\n      segmentB = `~${segmentB}`;\n    }\n\n    return segmentA > segmentB ? 1 : -1;\n  });\n\n  for (const rawRoute of rawRoutes) {\n    sortRawRoutes(rawRoute.children);\n  }\n}\n\nfunction deprioritizeSegment(segment: string): string {\n  // deprioritize param and wildcard segments\n  return segment.replace(':', '~~').replace('**', '~~~~');\n}\n\nexport const routes: Route[] = createRoutes({ ...FILES, ...CONTENT_FILES });\n","import { inject } from '@angular/core';\nimport { Route as NgRoute, Router } from '@angular/router';\nimport { ActivatedRoute } from '@angular/router';\n\ntype RouteOmitted =\n  | 'component'\n  | 'loadComponent'\n  | 'loadChildren'\n  | 'path'\n  | 'pathMatch';\n\ntype RestrictedRoute = Omit<NgRoute, RouteOmitted>;\n\n/**\n * @deprecated Use `RouteMeta` type instead.\n * For more info see: https://github.com/analogjs/analog/issues/223\n *\n * Defines additional route config metadata. This\n * object is merged into the route config with\n * the predefined file-based route.\n *\n * @usageNotes\n *\n * ```\n * import { Component } from '@angular/core';\n * import { defineRouteMeta } from '@analogjs/router';\n *\n *  export const routeMeta = defineRouteMeta({\n *    title: 'Welcome'\n *  });\n *\n * @Component({\n *   template: `Home`,\n *   standalone: true,\n * })\n * export default class HomeComponent {}\n * ```\n *\n * @param route\n * @returns\n */\nexport const defineRouteMeta = (route: RestrictedRoute) => {\n  return route;\n};\n\n/**\n * Returns the instance of Angular Router\n *\n * @returns The router\n */\nexport const injectRouter = () => {\n  return inject(Router);\n};\n\n/**\n * Returns the instance of the Activate Route for the component\n *\n * @returns The activated route\n */\nexport const injectActivatedRoute = () => {\n  return inject(ActivatedRoute);\n};\n","import {\n  ENVIRONMENT_INITIALIZER,\n  EnvironmentProviders,\n  makeEnvironmentProviders,\n  Provider,\n} from '@angular/core';\nimport { provideRouter, RouterFeatures } from '@angular/router';\n\nimport { routes } from './routes';\nimport { updateMetaTagsOnRouteChange } from './meta-tags';\n\n/**\n * Sets up providers for the Angular router, and registers\n * file-based routes. Additional features can be provided\n * to further configure the behavior of the router.\n *\n * @param features\n * @returns Providers and features to configure the router with routes\n */\nexport function provideFileRouter(\n  ...features: RouterFeatures[]\n): EnvironmentProviders {\n  return makeEnvironmentProviders([\n    // TODO: remove type casting after Angular >=15.1.1 upgrade\n    // https://github.com/angular/angular/pull/48720\n    (\n      provideRouter(routes, ...features) as unknown as {\n        ɵproviders: Provider[];\n      }\n    ).ɵproviders,\n    {\n      provide: ENVIRONMENT_INITIALIZER,\n      multi: true,\n      useValue: () => updateMetaTagsOnRouteChange(),\n    },\n  ]);\n}\n","import { Injector, inject } from '@angular/core';\nimport { ActivatedRoute, Data } from '@angular/router';\nimport { Observable, map } from 'rxjs';\n\nimport { PageServerLoad } from './route-types';\n\nexport function injectLoad<\n  T extends (pageServerLoad: PageServerLoad) => Promise<any>\n>(options?: { injector?: Injector }): Observable<Awaited<ReturnType<T>>> {\n  const injector = options?.injector ?? inject(Injector);\n  const route = injector.get(ActivatedRoute);\n\n  return route.data.pipe(\n    map<Data, Awaited<ReturnType<T>>>((data) => data['load'])\n  );\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}